#BlueJ class context
comment0.target=Spider
comment0.text=\r\n\ Create\ a\ spider.\r\n\ \r\n\ @author\ Daniel\ Diaz\ &&\ Miguel\ Motta\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=isVisible
comment1.target=Spider(boolean)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Spider\r\n
comment10.params=strand\ spots
comment10.target=java.lang.String\ spotInStrand(int,\ java.util.HashMap)
comment10.text=\r\n\ Return\ the\ color\ of\ the\ spot\ that\ is\ on\ the\ strand\r\n
comment11.params=bridges
comment11.target=java.lang.String[]\ unusedBridges(java.util.HashMap)
comment11.text=\r\n\ Return\ the\ bridges\ that\ the\ spider\ didn't\ use\r\n\ @param\ bridges\ \ \ the\ existing\ bridges\ in\ the\ web\r\n\ @return\ \ the\ bridges\ color\ that\ the\ spider\ didn't\ use\r\n
comment12.params=bridges\ favorite\ strands
comment12.target=java.util.ArrayList\ minBridgesToAdd(int[][],\ int,\ int)
comment12.text=\r\n\ Return\ the\ minimum\ number\ of\ bridges\ to\ add\ for\ each\ strand\ to\ reach\ the\ spot\r\n\ @param\ \ \ bridges\ \ \ \ \ the\ strand\ where\ the\ spot\ is\ located\r\n\ @param\ \ \ favorite\ \ \ \ the\ strand\ where\ the\ spot\ is\ located\r\n\ @param\ \ \ strands\ \ \ \ \ the\ number\ of\ strands\ in\ the\ web\r\n\ @return\ \ the\ minimum\ number\ of\ bridges\ to\ add\r\n
comment13.params=strands\ favorite\ bridges\ strand
comment13.target=bridgesToAdd(int,\ int,\ int[][],\ int)
comment13.text=\r\n\ Return\ the\ bridges\ to\ add\ on\ the\ web\ to\ reach\ the\ spot\r\n\ @param\ strands\ \ \ the\ number\ of\ strands\ in\ the\ web\r\n\ @param\ favorite\ \ the\ strand\ where\ the\ spot\ is\ locate\r\n\ @param\ bridges\ \ \ the\ existing\ bridges\ in\ the\ web\r\n\ @param\ strand\ \ \ \ the\ strand\ where\ the\ spider\ start\r\n\ @return\ \ the\ bridges\ to\ add\ on\ the\ web\r\n
comment14.params=bridges\ favorite\ strands
comment14.target=addBridgesLeft(int[][],\ int,\ int)
comment14.text=\r\n\ Return\ the\ number\ of\ bridges\ to\ be\ added\ on\ the\ left\ for\ each\ strand\ to\ reach\ the\ spot\r\n
comment15.params=bridges\ favorite\ strands
comment15.target=addBridgesRight(int[][],\ int,\ int)
comment15.text=\r\n\ Return\ the\ number\ of\ bridges\ to\ be\ added\ on\ the\ right\ for\ each\ strand\ to\ reach\ the\ spot\r\n
comment16.params=left\ bridge\ bridges\ strands
comment16.target=int\ distanceBridgeAdded(boolean,\ int[],\ int[][],\ int)
comment16.text=\r\n\ Return\ the\ distance\ of\ the\ bridge\ to\ add\r\n
comment17.params=bridgeToGo\ favorite
comment17.target=boolean\ reachSpot(int[],\ int)
comment17.text=\r\n\ Check\ if\ the\ spot\ is\ reachable\ from\ the\ point\ where\ the\ spider\ is\ located\r\n
comment18.params=bridges\ strands
comment18.target=int[]\ bridgeToGo(int[][],\ int)
comment18.text=\r\n\ Return\ the\ bridge\ closest\ to\ the\ spider\r\n
comment19.params=
comment19.target=int\ getDistance()
comment19.text=\r\n\ This\ method\ returns\ the\ distance\ of\ the\ spider\ respect\ the\ origin.\r\n\ @return\ \ the\ distance\ of\ the\ spider\ respect\ the\ origin.\r\n
comment2.params=strand\ numStrands
comment2.target=void\ spiderSit(int,\ int)
comment2.text=\r\n\ Seat\ the\ spider\ in\ the\ center\ with\ reference\ to\ a\ specific\ strand\r\n\ @param\ \ \ strand\ \ \ \ \ \ the\ strand\ to\ wich\ the\ spider\ will\ refer\r\n\ @param\ \ \ numStrands\ \ the\ number\ of\ strand\ existing\ on\ the\ web\ \ \ \ \r\n
comment20.params=
comment20.target=boolean\ getOk()
comment20.text=\r\n\ Return\ the\ status\ of\ the\ spider\r\n\ @return\ \ if\ an\ action\ could\ be\ completed\r\n
comment21.params=ok
comment21.target=void\ setOk(boolean)
comment21.text=\r\n\ Change\ the\ status\ of\ the\ spider\r\n\ @param\ \ \ ok\ \ \ \ the\ new\ status\ of\ the\ spider\r\n
comment22.params=
comment22.target=void\ draw()
comment22.text=\r\n\ Draw\ the\ spider\ with\ current\ specifications\ on\ screen.\r\n
comment23.params=
comment23.target=void\ erase()
comment23.text=\r\n\ Erase\ the\ spider\ on\ screen.\r\n
comment24.params=
comment24.target=void\ makeVisible()
comment24.text=\r\n\ Make\ visible\ the\ spider\r\n
comment25.params=
comment25.target=void\ makeInvisible()
comment25.text=\r\n\ Make\ invisible\ the\ spider\r\n
comment26.params=
comment26.target=void\ jumpSpider()
comment26.text=\r\n\ The\ spider\ jump\ to\ the\ next\ strand\r\n
comment27.params=
comment27.target=void\ killSpider()
comment27.text=\r\n\ Deletes\ the\ spider\ from\ the\ web.\r\n
comment3.params=strands\ bridges
comment3.target=void\ spiderWalk(java.util.HashMap,\ java.util.HashMap)
comment3.text=\r\n\ The\ spider\ walks\ through\ the\ strands\ and\ bridges\r\n\ @param\ \ \ strands\ the\ existing\ strands\ in\ the\ web\r\n\ @param\ \ \ bridges\ the\ existing\ bridges\ in\ the\ web\r\n
comment4.params=w
comment4.target=void\ setWeb(Web)
comment4.text=\r\n\ This\ method\ return\ sets\ the\ web\ where\ the\ is\ spider.\r\n\ @param\ w,\ is\ the\ web\ where\ the\ is\ spider.\r\n
comment5.params=x1\ y1\ x2\ y2
comment5.target=void\ moveSpider(double,\ double,\ double,\ double)
comment5.text=\r\n\ Move\ the\ spider\ trough\ a\ line\r\n
comment6.params=x1\ y1\ x2\ y2\ t
comment6.target=java.awt.geom.Point2D.Double\ parameterizedSegment(double,\ double,\ double,\ double,\ double)
comment6.text=\r\n\ Return\ a\ point\ belonging\ to\ the\ line\r\n
comment7.params=bridges
comment7.target=Bridge\ bridgeToGo(java.util.HashMap)
comment7.text=\r\n\ Return\ the\ bridge\ closest\ to\ the\ spider\r\n
comment8.params=
comment8.target=int[]\ getLastPath()
comment8.text=\r\n\ Return\ the\ path\ along\ wich\ the\ spider\ walked\r\n\ @return\ \ the\ strands\ where\ the\ spider\ walked\r\n
comment9.params=bridges\ spots
comment9.target=java.lang.String[]\ reachableSpots(java.util.HashMap,\ java.util.HashMap)
comment9.text=\r\n\ Return\ the\ spots\ that\ the\ spider\ can\ reach\r\n\ @param\ bridges\ \ \ the\ existing\ bridges\ in\ the\ web\r\n\ @param\ spots\ \ \ \ \ the\ existing\ spots\ in\ the\ web\r\n\ @return\ \ \ \ \ \ \ \ \ \ the\ spots\ color\ that\ the\ spider\ can\ reach\r\n
numComments=28
